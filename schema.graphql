type User {
  id: ID!
  name: String!
  email: String!
  role: Role
}

enum Role {
  Admin
  User
}

enum QuestionType {
  MCQ
  Coding
}

enum Status {
  New
  Started
  Completed
}

type LoginResult {
  id: ID!
  token: String!
  name: String!
  email: String!
  role: Role!
}

type Question {
  id: ID!
  title: String!
  type: QuestionType
  options: [String!]
}

type Skill {
  id: ID!
  name: String!
  description: String!
  questions: [Question!]
}

type Test {
  id: ID!
  name: String!
  skills: [Skill!]
  testId: String!
  noOfApplicants: Int
}

type Assessment {
  id: ID!
  score: Int
  status: Status!
  test: Test
  user: User
}

input UserInput {
  questionId: ID!
  answer: String!
}

type Query {
  me: User
  getAllAssessments(
    status: Status
    score: Int
    page: Int
    limit: Int
  ): [Assessment!]
  getAllTests(testId: String): [Test!]
  getAllSkills(skillId: String): [Skill!]
}

type Mutation {
  createUser(name: String!, email: String!, password: String!, role: Role): User
  login(email: String!, password: String!): LoginResult
  createSkill(name: String!, description: String!): Skill
  createQuestion(
    title: String!
    type: QuestionType
    options: [String!]
    correctOption: String
    skillId: ID!
  ): Question
  createTest(name: String!, skills: [ID!]!): Test
  createAssessment(status: Status!, testId: ID!, userId: ID!): Assessment
  editTest(id: ID!, testName: String!, skills: [ID!]!): Test
  deleteTest(id: ID!): ID
  editAssessment(id: ID!, status: Status!, userInput: [UserInput!]): Assessment
}
